// This file is automatically generated by Keystone, do not modify it manually.
// Modify your Keystone config when you want to change this.

datasource postgresql {
  url      = env("DATABASE_URL")
  provider = "postgresql"
}

generator client {
  provider   = "prisma-client-js"
  output     = "node_modules/.prisma/client"
  engineType = "binary"
}

model Channel {
  id                      String       @id @default(cuid())
  name                    String       @default("")
  description             String       @default("")
  posts                   Post[]       @relation("Post_channel")
  club                    Club?        @relation("Channel_club", fields: [clubId], references: [id])
  clubId                  String?      @map("club")
  status                  String?
  content                 Json         @default("[{\"type\":\"paragraph\",\"children\":[{\"text\":\"\"}]}]")
  from_Preference_channel Preference[] @relation("Preference_channel")

  @@index([clubId])
}

model Club {
  id          String       @id @default(cuid())
  name        String       @default("")
  channels    Channel[]    @relation("Channel_club")
  memberships Membership[] @relation("Club_memberships_Membership_club")
  status      String?
  content     Json         @default("[{\"type\":\"paragraph\",\"children\":[{\"text\":\"\"}]}]")
}

model Post {
  id          String    @id @default(cuid())
  title       String    @default("")
  channel     Channel?  @relation("Post_channel", fields: [channelId], references: [id])
  channelId   String?   @map("channel")
  status      String?
  content     Json      @default("[{\"type\":\"paragraph\",\"children\":[{\"text\":\"\"}]}]")
  publishDate DateTime?
  author      User?     @relation("Post_author", fields: [authorId], references: [id])
  authorId    String?   @map("author")
  tags        Tag[]     @relation("Post_tags_Tag_posts")

  @@index([channelId])
  @@index([authorId])
}

model Preference {
  id                String   @id @default(cuid())
  name              String   @default("")
  user              User?    @relation("Preference_user", fields: [userId], references: [id])
  userId            String?  @map("user")
  channel           Channel? @relation("Preference_channel", fields: [channelId], references: [id])
  channelId         String?  @map("channel")
  canManageProducts Boolean  @default(false)
  canSeeOtherUsers  Boolean  @default(false)
  canManageUsers    Boolean  @default(false)
  canManageRoles    Boolean  @default(false)
  canManageCart     Boolean  @default(false)
  canManageOrgs     Boolean  @default(false)

  @@index([userId])
  @@index([channelId])
}

model Membership {
  id                   String  @id @default(cuid())
  name                 String  @default("")
  description          String  @default("")
  canManagePosts       Boolean @default(false)
  canSeeOtherUsers     Boolean @default(false)
  canManageUsers       Boolean @default(false)
  canManageMemberships Boolean @default(false)
  canManageChannels    Boolean @default(false)
  canManageOrgs        Boolean @default(false)
  club                 Club[]  @relation("Club_memberships_Membership_club")
  users                User[]  @relation("Membership_users_User_memberships")
}

model Role {
  id                   String  @id @default(cuid())
  name                 String  @default("")
  canManageClubs       Boolean @default(false)
  canSeeOtherUsers     Boolean @default(false)
  canManageUsers       Boolean @default(false)
  canManageRoles       Boolean @default(false)
  canManageMemberships Boolean @default(false)
  canManagePosts       Boolean @default(false)
  assignedTo           User[]  @relation("User_role")
}

model Tag {
  id    String @id @default(cuid())
  name  String @default("")
  posts Post[] @relation("Post_tags_Tag_posts")
}

model User {
  id          String       @id @default(cuid())
  name        String       @default("")
  email       String       @unique @default("")
  password    String?
  posts       Post[]       @relation("Post_author")
  role        Role?        @relation("User_role", fields: [roleId], references: [id])
  roleId      String?      @map("role")
  preferences Preference[] @relation("Preference_user")
  memberships Membership[] @relation("Membership_users_User_memberships")

  @@index([roleId])
}