"""
 A keystone list
"""
type Channel {
  id: ID!
  name: String
  description: String
  posts(
    where: PostWhereInput! = {}
    search: String
    sortBy: [SortPostsBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [PostOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): [Post!]
  _postsMeta(
    where: PostWhereInput! = {}
    search: String
    sortBy: [SortPostsBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [PostOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): _QueryMeta
    @deprecated(
      reason: "This query will be removed in a future version. Please use postsCount instead."
    )
  postsCount(where: PostWhereInput! = {}): Int
  club: Club
  status: String
  content: Channel_content_DocumentField
}

type _QueryMeta {
  count: Int
}

type Channel_content_DocumentField {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input ChannelWhereInput {
  AND: [ChannelWhereInput!]
  OR: [ChannelWhereInput!]
  id: ID
  id_not: ID
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  name: String
  name_not: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  name_i: String
  name_not_i: String
  name_contains_i: String
  name_not_contains_i: String
  name_starts_with_i: String
  name_not_starts_with_i: String
  name_ends_with_i: String
  name_not_ends_with_i: String
  name_in: [String]
  name_not_in: [String]
  description: String
  description_not: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  description_i: String
  description_not_i: String
  description_contains_i: String
  description_not_contains_i: String
  description_starts_with_i: String
  description_not_starts_with_i: String
  description_ends_with_i: String
  description_not_ends_with_i: String
  description_in: [String]
  description_not_in: [String]

  """
   condition must be true for all nodes
  """
  posts_every: PostWhereInput

  """
   condition must be true for at least 1 node
  """
  posts_some: PostWhereInput

  """
   condition must be false for all nodes
  """
  posts_none: PostWhereInput
  club: ClubWhereInput
  club_is_null: Boolean
  status: String
  status_not: String
  status_in: [String]
  status_not_in: [String]
}

input ChannelWhereUniqueInput {
  id: ID
}

enum SortChannelsBy {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
  status_ASC
  status_DESC
}

input ChannelOrderByInput {
  id: OrderDirection
  name: OrderDirection
  description: OrderDirection
  status: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input ChannelUpdateInput {
  name: String
  description: String
  posts: PostRelateToManyInput
  club: ClubRelateToOneInput
  status: String
  content: JSON
}

input PostRelateToManyInput {
  create: [PostCreateInput]
  connect: [PostWhereUniqueInput]
  disconnect: [PostWhereUniqueInput]
  disconnectAll: Boolean
}

input ClubRelateToOneInput {
  create: ClubCreateInput
  connect: ClubWhereUniqueInput
  disconnect: ClubWhereUniqueInput
  disconnectAll: Boolean
}

input ChannelsUpdateInput {
  id: ID!
  data: ChannelUpdateInput
}

input ChannelCreateInput {
  name: String
  description: String
  posts: PostRelateToManyInput
  club: ClubRelateToOneInput
  status: String
  content: JSON
}

input ChannelsCreateInput {
  data: ChannelCreateInput
}

"""
 A keystone list
"""
type Club {
  id: ID!
  name: String
  channels(
    where: ChannelWhereInput! = {}
    search: String
    sortBy: [SortChannelsBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [ChannelOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): [Channel!]
  _channelsMeta(
    where: ChannelWhereInput! = {}
    search: String
    sortBy: [SortChannelsBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [ChannelOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): _QueryMeta
    @deprecated(
      reason: "This query will be removed in a future version. Please use channelsCount instead."
    )
  channelsCount(where: ChannelWhereInput! = {}): Int
  memberships(
    where: MembershipWhereInput! = {}
    search: String
    sortBy: [SortMembershipsBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [MembershipOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): [Membership!]
  _membershipsMeta(
    where: MembershipWhereInput! = {}
    search: String
    sortBy: [SortMembershipsBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [MembershipOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): _QueryMeta
    @deprecated(
      reason: "This query will be removed in a future version. Please use membershipsCount instead."
    )
  membershipsCount(where: MembershipWhereInput! = {}): Int
  status: String
  content: Club_content_DocumentField
}

type Club_content_DocumentField {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input ClubWhereInput {
  AND: [ClubWhereInput!]
  OR: [ClubWhereInput!]
  id: ID
  id_not: ID
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  name: String
  name_not: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  name_i: String
  name_not_i: String
  name_contains_i: String
  name_not_contains_i: String
  name_starts_with_i: String
  name_not_starts_with_i: String
  name_ends_with_i: String
  name_not_ends_with_i: String
  name_in: [String]
  name_not_in: [String]

  """
   condition must be true for all nodes
  """
  channels_every: ChannelWhereInput

  """
   condition must be true for at least 1 node
  """
  channels_some: ChannelWhereInput

  """
   condition must be false for all nodes
  """
  channels_none: ChannelWhereInput

  """
   condition must be true for all nodes
  """
  memberships_every: MembershipWhereInput

  """
   condition must be true for at least 1 node
  """
  memberships_some: MembershipWhereInput

  """
   condition must be false for all nodes
  """
  memberships_none: MembershipWhereInput
  status: String
  status_not: String
  status_in: [String]
  status_not_in: [String]
}

input ClubWhereUniqueInput {
  id: ID
}

enum SortClubsBy {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  status_ASC
  status_DESC
}

input ClubOrderByInput {
  id: OrderDirection
  name: OrderDirection
  status: OrderDirection
}

input ClubUpdateInput {
  name: String
  channels: ChannelRelateToManyInput
  memberships: MembershipRelateToManyInput
  status: String
  content: JSON
}

input ChannelRelateToManyInput {
  create: [ChannelCreateInput]
  connect: [ChannelWhereUniqueInput]
  disconnect: [ChannelWhereUniqueInput]
  disconnectAll: Boolean
}

input MembershipRelateToManyInput {
  create: [MembershipCreateInput]
  connect: [MembershipWhereUniqueInput]
  disconnect: [MembershipWhereUniqueInput]
  disconnectAll: Boolean
}

input ClubsUpdateInput {
  id: ID!
  data: ClubUpdateInput
}

input ClubCreateInput {
  name: String
  channels: ChannelRelateToManyInput
  memberships: MembershipRelateToManyInput
  status: String
  content: JSON
}

input ClubsCreateInput {
  data: ClubCreateInput
}

"""
 A keystone list
"""
type Post {
  id: ID!
  title: String
  channel: Channel
  status: String
  content: Post_content_DocumentField
  publishDate: String
  author: User
  tags(
    where: TagWhereInput! = {}
    search: String
    sortBy: [SortTagsBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [TagOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): [Tag!]
  _tagsMeta(
    where: TagWhereInput! = {}
    search: String
    sortBy: [SortTagsBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [TagOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): _QueryMeta
    @deprecated(
      reason: "This query will be removed in a future version. Please use tagsCount instead."
    )
  tagsCount(where: TagWhereInput! = {}): Int
}

type Post_content_DocumentField {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input PostWhereInput {
  AND: [PostWhereInput!]
  OR: [PostWhereInput!]
  id: ID
  id_not: ID
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  title: String
  title_not: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  title_i: String
  title_not_i: String
  title_contains_i: String
  title_not_contains_i: String
  title_starts_with_i: String
  title_not_starts_with_i: String
  title_ends_with_i: String
  title_not_ends_with_i: String
  title_in: [String]
  title_not_in: [String]
  channel: ChannelWhereInput
  channel_is_null: Boolean
  status: String
  status_not: String
  status_in: [String]
  status_not_in: [String]
  publishDate: String
  publishDate_not: String
  publishDate_lt: String
  publishDate_lte: String
  publishDate_gt: String
  publishDate_gte: String
  publishDate_in: [String]
  publishDate_not_in: [String]
  author: UserWhereInput
  author_is_null: Boolean

  """
   condition must be true for all nodes
  """
  tags_every: TagWhereInput

  """
   condition must be true for at least 1 node
  """
  tags_some: TagWhereInput

  """
   condition must be false for all nodes
  """
  tags_none: TagWhereInput
}

input PostWhereUniqueInput {
  id: ID
}

enum SortPostsBy {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  status_ASC
  status_DESC
  publishDate_ASC
  publishDate_DESC
}

input PostOrderByInput {
  id: OrderDirection
  title: OrderDirection
  status: OrderDirection
  publishDate: OrderDirection
}

input PostUpdateInput {
  title: String
  channel: ChannelRelateToOneInput
  status: String
  content: JSON
  publishDate: String
  author: UserRelateToOneInput
  tags: TagRelateToManyInput
}

input ChannelRelateToOneInput {
  create: ChannelCreateInput
  connect: ChannelWhereUniqueInput
  disconnect: ChannelWhereUniqueInput
  disconnectAll: Boolean
}

input UserRelateToOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: UserWhereUniqueInput
  disconnectAll: Boolean
}

input TagRelateToManyInput {
  create: [TagCreateInput]
  connect: [TagWhereUniqueInput]
  disconnect: [TagWhereUniqueInput]
  disconnectAll: Boolean
}

input PostsUpdateInput {
  id: ID!
  data: PostUpdateInput
}

input PostCreateInput {
  title: String
  channel: ChannelRelateToOneInput
  status: String
  content: JSON
  publishDate: String
  author: UserRelateToOneInput
  tags: TagRelateToManyInput
}

input PostsCreateInput {
  data: PostCreateInput
}

"""
 A keystone list
"""
type Preference {
  id: ID!
  name: String
  user: User
  channel: Channel
  canManageProducts: Boolean
  canSeeOtherUsers: Boolean
  canManageUsers: Boolean
  canManageRoles: Boolean
  canManageCart: Boolean
  canManageOrgs: Boolean
}

input PreferenceWhereInput {
  AND: [PreferenceWhereInput!]
  OR: [PreferenceWhereInput!]
  id: ID
  id_not: ID
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  name: String
  name_not: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  name_i: String
  name_not_i: String
  name_contains_i: String
  name_not_contains_i: String
  name_starts_with_i: String
  name_not_starts_with_i: String
  name_ends_with_i: String
  name_not_ends_with_i: String
  name_in: [String]
  name_not_in: [String]
  user: UserWhereInput
  user_is_null: Boolean
  channel: ChannelWhereInput
  channel_is_null: Boolean
  canManageProducts: Boolean
  canManageProducts_not: Boolean
  canSeeOtherUsers: Boolean
  canSeeOtherUsers_not: Boolean
  canManageUsers: Boolean
  canManageUsers_not: Boolean
  canManageRoles: Boolean
  canManageRoles_not: Boolean
  canManageCart: Boolean
  canManageCart_not: Boolean
  canManageOrgs: Boolean
  canManageOrgs_not: Boolean
}

input PreferenceWhereUniqueInput {
  id: ID
}

enum SortPreferencesBy {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  canManageProducts_ASC
  canManageProducts_DESC
  canSeeOtherUsers_ASC
  canSeeOtherUsers_DESC
  canManageUsers_ASC
  canManageUsers_DESC
  canManageRoles_ASC
  canManageRoles_DESC
  canManageCart_ASC
  canManageCart_DESC
  canManageOrgs_ASC
  canManageOrgs_DESC
}

input PreferenceOrderByInput {
  id: OrderDirection
  name: OrderDirection
  canManageProducts: OrderDirection
  canSeeOtherUsers: OrderDirection
  canManageUsers: OrderDirection
  canManageRoles: OrderDirection
  canManageCart: OrderDirection
  canManageOrgs: OrderDirection
}

input PreferenceUpdateInput {
  name: String
  user: UserRelateToOneInput
  channel: ChannelRelateToOneInput
  canManageProducts: Boolean
  canSeeOtherUsers: Boolean
  canManageUsers: Boolean
  canManageRoles: Boolean
  canManageCart: Boolean
  canManageOrgs: Boolean
}

input PreferencesUpdateInput {
  id: ID!
  data: PreferenceUpdateInput
}

input PreferenceCreateInput {
  name: String
  user: UserRelateToOneInput
  channel: ChannelRelateToOneInput
  canManageProducts: Boolean
  canSeeOtherUsers: Boolean
  canManageUsers: Boolean
  canManageRoles: Boolean
  canManageCart: Boolean
  canManageOrgs: Boolean
}

input PreferencesCreateInput {
  data: PreferenceCreateInput
}

"""
 A keystone list
"""
type Membership {
  id: ID!
  name: String
  description: String
  canManagePosts: Boolean
  canSeeOtherUsers: Boolean
  canManageUsers: Boolean
  canManageMemberships: Boolean
  canManageChannels: Boolean
  canManageOrgs: Boolean
  club(
    where: ClubWhereInput! = {}
    search: String
    sortBy: [SortClubsBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [ClubOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): [Club!]
  _clubMeta(
    where: ClubWhereInput! = {}
    search: String
    sortBy: [SortClubsBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [ClubOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): _QueryMeta
    @deprecated(
      reason: "This query will be removed in a future version. Please use clubCount instead."
    )
  clubCount(where: ClubWhereInput! = {}): Int
  users(
    where: UserWhereInput! = {}
    search: String
    sortBy: [SortUsersBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [UserOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): [User!]
  _usersMeta(
    where: UserWhereInput! = {}
    search: String
    sortBy: [SortUsersBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [UserOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): _QueryMeta
    @deprecated(
      reason: "This query will be removed in a future version. Please use usersCount instead."
    )
  usersCount(where: UserWhereInput! = {}): Int
}

input MembershipWhereInput {
  AND: [MembershipWhereInput!]
  OR: [MembershipWhereInput!]
  id: ID
  id_not: ID
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  name: String
  name_not: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  name_i: String
  name_not_i: String
  name_contains_i: String
  name_not_contains_i: String
  name_starts_with_i: String
  name_not_starts_with_i: String
  name_ends_with_i: String
  name_not_ends_with_i: String
  name_in: [String]
  name_not_in: [String]
  description: String
  description_not: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  description_i: String
  description_not_i: String
  description_contains_i: String
  description_not_contains_i: String
  description_starts_with_i: String
  description_not_starts_with_i: String
  description_ends_with_i: String
  description_not_ends_with_i: String
  description_in: [String]
  description_not_in: [String]
  canManagePosts: Boolean
  canManagePosts_not: Boolean
  canSeeOtherUsers: Boolean
  canSeeOtherUsers_not: Boolean
  canManageUsers: Boolean
  canManageUsers_not: Boolean
  canManageMemberships: Boolean
  canManageMemberships_not: Boolean
  canManageChannels: Boolean
  canManageChannels_not: Boolean
  canManageOrgs: Boolean
  canManageOrgs_not: Boolean

  """
   condition must be true for all nodes
  """
  club_every: ClubWhereInput

  """
   condition must be true for at least 1 node
  """
  club_some: ClubWhereInput

  """
   condition must be false for all nodes
  """
  club_none: ClubWhereInput

  """
   condition must be true for all nodes
  """
  users_every: UserWhereInput

  """
   condition must be true for at least 1 node
  """
  users_some: UserWhereInput

  """
   condition must be false for all nodes
  """
  users_none: UserWhereInput
}

input MembershipWhereUniqueInput {
  id: ID
}

enum SortMembershipsBy {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
  canManagePosts_ASC
  canManagePosts_DESC
  canSeeOtherUsers_ASC
  canSeeOtherUsers_DESC
  canManageUsers_ASC
  canManageUsers_DESC
  canManageMemberships_ASC
  canManageMemberships_DESC
  canManageChannels_ASC
  canManageChannels_DESC
  canManageOrgs_ASC
  canManageOrgs_DESC
}

input MembershipOrderByInput {
  id: OrderDirection
  name: OrderDirection
  description: OrderDirection
  canManagePosts: OrderDirection
  canSeeOtherUsers: OrderDirection
  canManageUsers: OrderDirection
  canManageMemberships: OrderDirection
  canManageChannels: OrderDirection
  canManageOrgs: OrderDirection
}

input MembershipUpdateInput {
  name: String
  description: String
  canManagePosts: Boolean
  canSeeOtherUsers: Boolean
  canManageUsers: Boolean
  canManageMemberships: Boolean
  canManageChannels: Boolean
  canManageOrgs: Boolean
  club: ClubRelateToManyInput
  users: UserRelateToManyInput
}

input ClubRelateToManyInput {
  create: [ClubCreateInput]
  connect: [ClubWhereUniqueInput]
  disconnect: [ClubWhereUniqueInput]
  disconnectAll: Boolean
}

input UserRelateToManyInput {
  create: [UserCreateInput]
  connect: [UserWhereUniqueInput]
  disconnect: [UserWhereUniqueInput]
  disconnectAll: Boolean
}

input MembershipsUpdateInput {
  id: ID!
  data: MembershipUpdateInput
}

input MembershipCreateInput {
  name: String
  description: String
  canManagePosts: Boolean
  canSeeOtherUsers: Boolean
  canManageUsers: Boolean
  canManageMemberships: Boolean
  canManageChannels: Boolean
  canManageOrgs: Boolean
  club: ClubRelateToManyInput
  users: UserRelateToManyInput
}

input MembershipsCreateInput {
  data: MembershipCreateInput
}

"""
 A keystone list
"""
type Role {
  id: ID!
  name: String
  canManageClubs: Boolean
  canSeeOtherUsers: Boolean
  canManageUsers: Boolean
  canManageRoles: Boolean
  canManageMemberships: Boolean
  canManagePosts: Boolean
  assignedTo(
    where: UserWhereInput! = {}
    search: String
    sortBy: [SortUsersBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [UserOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): [User!]
  _assignedToMeta(
    where: UserWhereInput! = {}
    search: String
    sortBy: [SortUsersBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [UserOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): _QueryMeta
    @deprecated(
      reason: "This query will be removed in a future version. Please use assignedToCount instead."
    )
  assignedToCount(where: UserWhereInput! = {}): Int
}

input RoleWhereInput {
  AND: [RoleWhereInput!]
  OR: [RoleWhereInput!]
  id: ID
  id_not: ID
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  name: String
  name_not: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  name_i: String
  name_not_i: String
  name_contains_i: String
  name_not_contains_i: String
  name_starts_with_i: String
  name_not_starts_with_i: String
  name_ends_with_i: String
  name_not_ends_with_i: String
  name_in: [String]
  name_not_in: [String]
  canManageClubs: Boolean
  canManageClubs_not: Boolean
  canSeeOtherUsers: Boolean
  canSeeOtherUsers_not: Boolean
  canManageUsers: Boolean
  canManageUsers_not: Boolean
  canManageRoles: Boolean
  canManageRoles_not: Boolean
  canManageMemberships: Boolean
  canManageMemberships_not: Boolean
  canManagePosts: Boolean
  canManagePosts_not: Boolean

  """
   condition must be true for all nodes
  """
  assignedTo_every: UserWhereInput

  """
   condition must be true for at least 1 node
  """
  assignedTo_some: UserWhereInput

  """
   condition must be false for all nodes
  """
  assignedTo_none: UserWhereInput
}

input RoleWhereUniqueInput {
  id: ID
}

enum SortRolesBy {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  canManageClubs_ASC
  canManageClubs_DESC
  canSeeOtherUsers_ASC
  canSeeOtherUsers_DESC
  canManageUsers_ASC
  canManageUsers_DESC
  canManageRoles_ASC
  canManageRoles_DESC
  canManageMemberships_ASC
  canManageMemberships_DESC
  canManagePosts_ASC
  canManagePosts_DESC
}

input RoleOrderByInput {
  id: OrderDirection
  name: OrderDirection
  canManageClubs: OrderDirection
  canSeeOtherUsers: OrderDirection
  canManageUsers: OrderDirection
  canManageRoles: OrderDirection
  canManageMemberships: OrderDirection
  canManagePosts: OrderDirection
}

input RoleUpdateInput {
  name: String
  canManageClubs: Boolean
  canSeeOtherUsers: Boolean
  canManageUsers: Boolean
  canManageRoles: Boolean
  canManageMemberships: Boolean
  canManagePosts: Boolean
  assignedTo: UserRelateToManyInput
}

input RolesUpdateInput {
  id: ID!
  data: RoleUpdateInput
}

input RoleCreateInput {
  name: String
  canManageClubs: Boolean
  canSeeOtherUsers: Boolean
  canManageUsers: Boolean
  canManageRoles: Boolean
  canManageMemberships: Boolean
  canManagePosts: Boolean
  assignedTo: UserRelateToManyInput
}

input RolesCreateInput {
  data: RoleCreateInput
}

"""
 A keystone list
"""
type Tag {
  id: ID!
  name: String
  posts(
    where: PostWhereInput! = {}
    search: String
    sortBy: [SortPostsBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [PostOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): [Post!]
  _postsMeta(
    where: PostWhereInput! = {}
    search: String
    sortBy: [SortPostsBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [PostOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): _QueryMeta
    @deprecated(
      reason: "This query will be removed in a future version. Please use postsCount instead."
    )
  postsCount(where: PostWhereInput! = {}): Int
}

input TagWhereInput {
  AND: [TagWhereInput!]
  OR: [TagWhereInput!]
  id: ID
  id_not: ID
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  name: String
  name_not: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  name_i: String
  name_not_i: String
  name_contains_i: String
  name_not_contains_i: String
  name_starts_with_i: String
  name_not_starts_with_i: String
  name_ends_with_i: String
  name_not_ends_with_i: String
  name_in: [String]
  name_not_in: [String]

  """
   condition must be true for all nodes
  """
  posts_every: PostWhereInput

  """
   condition must be true for at least 1 node
  """
  posts_some: PostWhereInput

  """
   condition must be false for all nodes
  """
  posts_none: PostWhereInput
}

input TagWhereUniqueInput {
  id: ID
}

enum SortTagsBy {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
}

input TagOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input TagUpdateInput {
  name: String
  posts: PostRelateToManyInput
}

input TagsUpdateInput {
  id: ID!
  data: TagUpdateInput
}

input TagCreateInput {
  name: String
  posts: PostRelateToManyInput
}

input TagsCreateInput {
  data: TagCreateInput
}

"""
 A keystone list
"""
type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
  posts(
    where: PostWhereInput! = {}
    search: String
    sortBy: [SortPostsBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [PostOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): [Post!]
  _postsMeta(
    where: PostWhereInput! = {}
    search: String
    sortBy: [SortPostsBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [PostOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): _QueryMeta
    @deprecated(
      reason: "This query will be removed in a future version. Please use postsCount instead."
    )
  postsCount(where: PostWhereInput! = {}): Int
  role: Role
  preferences(
    where: PreferenceWhereInput! = {}
    search: String
    sortBy: [SortPreferencesBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [PreferenceOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): [Preference!]
  _preferencesMeta(
    where: PreferenceWhereInput! = {}
    search: String
    sortBy: [SortPreferencesBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [PreferenceOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): _QueryMeta
    @deprecated(
      reason: "This query will be removed in a future version. Please use preferencesCount instead."
    )
  preferencesCount(where: PreferenceWhereInput! = {}): Int
  memberships(
    where: MembershipWhereInput! = {}
    search: String
    sortBy: [SortMembershipsBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [MembershipOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): [Membership!]
  _membershipsMeta(
    where: MembershipWhereInput! = {}
    search: String
    sortBy: [SortMembershipsBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [MembershipOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): _QueryMeta
    @deprecated(
      reason: "This query will be removed in a future version. Please use membershipsCount instead."
    )
  membershipsCount(where: MembershipWhereInput! = {}): Int
}

type PasswordState {
  isSet: Boolean!
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  id: ID
  id_not: ID
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  name: String
  name_not: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  name_i: String
  name_not_i: String
  name_contains_i: String
  name_not_contains_i: String
  name_starts_with_i: String
  name_not_starts_with_i: String
  name_ends_with_i: String
  name_not_ends_with_i: String
  name_in: [String]
  name_not_in: [String]
  email: String
  email_not: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  email_i: String
  email_not_i: String
  email_contains_i: String
  email_not_contains_i: String
  email_starts_with_i: String
  email_not_starts_with_i: String
  email_ends_with_i: String
  email_not_ends_with_i: String
  email_in: [String]
  email_not_in: [String]
  password_is_set: Boolean

  """
   condition must be true for all nodes
  """
  posts_every: PostWhereInput

  """
   condition must be true for at least 1 node
  """
  posts_some: PostWhereInput

  """
   condition must be false for all nodes
  """
  posts_none: PostWhereInput
  role: RoleWhereInput
  role_is_null: Boolean

  """
   condition must be true for all nodes
  """
  preferences_every: PreferenceWhereInput

  """
   condition must be true for at least 1 node
  """
  preferences_some: PreferenceWhereInput

  """
   condition must be false for all nodes
  """
  preferences_none: PreferenceWhereInput

  """
   condition must be true for all nodes
  """
  memberships_every: MembershipWhereInput

  """
   condition must be true for at least 1 node
  """
  memberships_some: MembershipWhereInput

  """
   condition must be false for all nodes
  """
  memberships_none: MembershipWhereInput
}

input UserWhereUniqueInput {
  id: ID
  email: String
}

enum SortUsersBy {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  email_ASC
  email_DESC
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  posts: PostRelateToManyInput
  role: RoleRelateToOneInput
  preferences: PreferenceRelateToManyInput
  memberships: MembershipRelateToManyInput
}

input RoleRelateToOneInput {
  create: RoleCreateInput
  connect: RoleWhereUniqueInput
  disconnect: RoleWhereUniqueInput
  disconnectAll: Boolean
}

input PreferenceRelateToManyInput {
  create: [PreferenceCreateInput]
  connect: [PreferenceWhereUniqueInput]
  disconnect: [PreferenceWhereUniqueInput]
  disconnectAll: Boolean
}

input UsersUpdateInput {
  id: ID!
  data: UserUpdateInput
}

input UserCreateInput {
  name: String
  email: String
  password: String
  posts: PostRelateToManyInput
  role: RoleRelateToOneInput
  preferences: PreferenceRelateToManyInput
  memberships: MembershipRelateToManyInput
}

input UsersCreateInput {
  data: UserCreateInput
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON
  @specifiedBy(
    url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"
  )

type Mutation {
  """
   Create a single Channel item.
  """
  createChannel(data: ChannelCreateInput): Channel

  """
   Create multiple Channel items.
  """
  createChannels(data: [ChannelsCreateInput]): [Channel]

  """
   Update a single Channel item by ID.
  """
  updateChannel(id: ID!, data: ChannelUpdateInput): Channel

  """
   Update multiple Channel items by ID.
  """
  updateChannels(data: [ChannelsUpdateInput]): [Channel]

  """
   Delete a single Channel item by ID.
  """
  deleteChannel(id: ID!): Channel

  """
   Delete multiple Channel items by ID.
  """
  deleteChannels(ids: [ID!]): [Channel]

  """
   Create a single Club item.
  """
  createClub(data: ClubCreateInput): Club

  """
   Create multiple Club items.
  """
  createClubs(data: [ClubsCreateInput]): [Club]

  """
   Update a single Club item by ID.
  """
  updateClub(id: ID!, data: ClubUpdateInput): Club

  """
   Update multiple Club items by ID.
  """
  updateClubs(data: [ClubsUpdateInput]): [Club]

  """
   Delete a single Club item by ID.
  """
  deleteClub(id: ID!): Club

  """
   Delete multiple Club items by ID.
  """
  deleteClubs(ids: [ID!]): [Club]

  """
   Create a single Post item.
  """
  createPost(data: PostCreateInput): Post

  """
   Create multiple Post items.
  """
  createPosts(data: [PostsCreateInput]): [Post]

  """
   Update a single Post item by ID.
  """
  updatePost(id: ID!, data: PostUpdateInput): Post

  """
   Update multiple Post items by ID.
  """
  updatePosts(data: [PostsUpdateInput]): [Post]

  """
   Delete a single Post item by ID.
  """
  deletePost(id: ID!): Post

  """
   Delete multiple Post items by ID.
  """
  deletePosts(ids: [ID!]): [Post]

  """
   Create a single Preference item.
  """
  createPreference(data: PreferenceCreateInput): Preference

  """
   Create multiple Preference items.
  """
  createPreferences(data: [PreferencesCreateInput]): [Preference]

  """
   Update a single Preference item by ID.
  """
  updatePreference(id: ID!, data: PreferenceUpdateInput): Preference

  """
   Update multiple Preference items by ID.
  """
  updatePreferences(data: [PreferencesUpdateInput]): [Preference]

  """
   Delete a single Preference item by ID.
  """
  deletePreference(id: ID!): Preference

  """
   Delete multiple Preference items by ID.
  """
  deletePreferences(ids: [ID!]): [Preference]

  """
   Create a single Membership item.
  """
  createMembership(data: MembershipCreateInput): Membership

  """
   Create multiple Membership items.
  """
  createMemberships(data: [MembershipsCreateInput]): [Membership]

  """
   Update a single Membership item by ID.
  """
  updateMembership(id: ID!, data: MembershipUpdateInput): Membership

  """
   Update multiple Membership items by ID.
  """
  updateMemberships(data: [MembershipsUpdateInput]): [Membership]

  """
   Delete a single Membership item by ID.
  """
  deleteMembership(id: ID!): Membership

  """
   Delete multiple Membership items by ID.
  """
  deleteMemberships(ids: [ID!]): [Membership]

  """
   Create a single Role item.
  """
  createRole(data: RoleCreateInput): Role

  """
   Create multiple Role items.
  """
  createRoles(data: [RolesCreateInput]): [Role]

  """
   Update a single Role item by ID.
  """
  updateRole(id: ID!, data: RoleUpdateInput): Role

  """
   Update multiple Role items by ID.
  """
  updateRoles(data: [RolesUpdateInput]): [Role]

  """
   Delete a single Role item by ID.
  """
  deleteRole(id: ID!): Role

  """
   Delete multiple Role items by ID.
  """
  deleteRoles(ids: [ID!]): [Role]

  """
   Create a single Tag item.
  """
  createTag(data: TagCreateInput): Tag

  """
   Create multiple Tag items.
  """
  createTags(data: [TagsCreateInput]): [Tag]

  """
   Update a single Tag item by ID.
  """
  updateTag(id: ID!, data: TagUpdateInput): Tag

  """
   Update multiple Tag items by ID.
  """
  updateTags(data: [TagsUpdateInput]): [Tag]

  """
   Delete a single Tag item by ID.
  """
  deleteTag(id: ID!): Tag

  """
   Delete multiple Tag items by ID.
  """
  deleteTags(ids: [ID!]): [Tag]

  """
   Create a single User item.
  """
  createUser(data: UserCreateInput): User

  """
   Create multiple User items.
  """
  createUsers(data: [UsersCreateInput]): [User]

  """
   Update a single User item by ID.
  """
  updateUser(id: ID!, data: UserUpdateInput): User

  """
   Update multiple User items by ID.
  """
  updateUsers(data: [UsersUpdateInput]): [User]

  """
   Delete a single User item by ID.
  """
  deleteUser(id: ID!): User

  """
   Delete multiple User items by ID.
  """
  deleteUsers(ids: [ID!]): [User]
  authenticateUserWithPassword(
    email: String!
    password: String!
  ): UserAuthenticationWithPasswordResult!
  createInitialUser(
    data: CreateInitialUserInput!
  ): UserAuthenticationWithPasswordSuccess!
  endSession: Boolean!
}

union AuthenticatedItem = User

union UserAuthenticationWithPasswordResult =
    UserAuthenticationWithPasswordSuccess
  | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  code: PasswordAuthErrorCode!
  message: String!
}

enum PasswordAuthErrorCode {
  FAILURE
  IDENTITY_NOT_FOUND
  SECRET_NOT_SET
  MULTIPLE_IDENTITY_MATCHES
  SECRET_MISMATCH
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type Query {
  """
   Search for all Channel items which match the where clause.
  """
  allChannels(
    where: ChannelWhereInput! = {}
    search: String
    sortBy: [SortChannelsBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [ChannelOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): [Channel!]

  """
   Search for the Channel item with the matching ID.
  """
  Channel(where: ChannelWhereUniqueInput!): Channel

  """
   Perform a meta-query on all Channel items which match the where clause.
  """
  _allChannelsMeta(
    where: ChannelWhereInput! = {}
    search: String
    sortBy: [SortChannelsBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [ChannelOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): _QueryMeta
    @deprecated(
      reason: "This query will be removed in a future version. Please use channelsCount instead."
    )
  channelsCount(where: ChannelWhereInput! = {}): Int

  """
   Search for all Club items which match the where clause.
  """
  allClubs(
    where: ClubWhereInput! = {}
    search: String
    sortBy: [SortClubsBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [ClubOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): [Club!]

  """
   Search for the Club item with the matching ID.
  """
  Club(where: ClubWhereUniqueInput!): Club

  """
   Perform a meta-query on all Club items which match the where clause.
  """
  _allClubsMeta(
    where: ClubWhereInput! = {}
    search: String
    sortBy: [SortClubsBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [ClubOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): _QueryMeta
    @deprecated(
      reason: "This query will be removed in a future version. Please use clubsCount instead."
    )
  clubsCount(where: ClubWhereInput! = {}): Int

  """
   Search for all Post items which match the where clause.
  """
  allPosts(
    where: PostWhereInput! = {}
    search: String
    sortBy: [SortPostsBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [PostOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): [Post!]

  """
   Search for the Post item with the matching ID.
  """
  Post(where: PostWhereUniqueInput!): Post

  """
   Perform a meta-query on all Post items which match the where clause.
  """
  _allPostsMeta(
    where: PostWhereInput! = {}
    search: String
    sortBy: [SortPostsBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [PostOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): _QueryMeta
    @deprecated(
      reason: "This query will be removed in a future version. Please use postsCount instead."
    )
  postsCount(where: PostWhereInput! = {}): Int

  """
   Search for all Preference items which match the where clause.
  """
  allPreferences(
    where: PreferenceWhereInput! = {}
    search: String
    sortBy: [SortPreferencesBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [PreferenceOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): [Preference!]

  """
   Search for the Preference item with the matching ID.
  """
  Preference(where: PreferenceWhereUniqueInput!): Preference

  """
   Perform a meta-query on all Preference items which match the where clause.
  """
  _allPreferencesMeta(
    where: PreferenceWhereInput! = {}
    search: String
    sortBy: [SortPreferencesBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [PreferenceOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): _QueryMeta
    @deprecated(
      reason: "This query will be removed in a future version. Please use preferencesCount instead."
    )
  preferencesCount(where: PreferenceWhereInput! = {}): Int

  """
   Search for all Membership items which match the where clause.
  """
  allMemberships(
    where: MembershipWhereInput! = {}
    search: String
    sortBy: [SortMembershipsBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [MembershipOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): [Membership!]

  """
   Search for the Membership item with the matching ID.
  """
  Membership(where: MembershipWhereUniqueInput!): Membership

  """
   Perform a meta-query on all Membership items which match the where clause.
  """
  _allMembershipsMeta(
    where: MembershipWhereInput! = {}
    search: String
    sortBy: [SortMembershipsBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [MembershipOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): _QueryMeta
    @deprecated(
      reason: "This query will be removed in a future version. Please use membershipsCount instead."
    )
  membershipsCount(where: MembershipWhereInput! = {}): Int

  """
   Search for all Role items which match the where clause.
  """
  allRoles(
    where: RoleWhereInput! = {}
    search: String
    sortBy: [SortRolesBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [RoleOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): [Role!]

  """
   Search for the Role item with the matching ID.
  """
  Role(where: RoleWhereUniqueInput!): Role

  """
   Perform a meta-query on all Role items which match the where clause.
  """
  _allRolesMeta(
    where: RoleWhereInput! = {}
    search: String
    sortBy: [SortRolesBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [RoleOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): _QueryMeta
    @deprecated(
      reason: "This query will be removed in a future version. Please use rolesCount instead."
    )
  rolesCount(where: RoleWhereInput! = {}): Int

  """
   Search for all Tag items which match the where clause.
  """
  allTags(
    where: TagWhereInput! = {}
    search: String
    sortBy: [SortTagsBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [TagOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): [Tag!]

  """
   Search for the Tag item with the matching ID.
  """
  Tag(where: TagWhereUniqueInput!): Tag

  """
   Perform a meta-query on all Tag items which match the where clause.
  """
  _allTagsMeta(
    where: TagWhereInput! = {}
    search: String
    sortBy: [SortTagsBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [TagOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): _QueryMeta
    @deprecated(
      reason: "This query will be removed in a future version. Please use tagsCount instead."
    )
  tagsCount(where: TagWhereInput! = {}): Int

  """
   Search for all User items which match the where clause.
  """
  allUsers(
    where: UserWhereInput! = {}
    search: String
    sortBy: [SortUsersBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [UserOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): [User!]

  """
   Search for the User item with the matching ID.
  """
  User(where: UserWhereUniqueInput!): User

  """
   Perform a meta-query on all User items which match the where clause.
  """
  _allUsersMeta(
    where: UserWhereInput! = {}
    search: String
    sortBy: [SortUsersBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [UserOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): _QueryMeta
    @deprecated(
      reason: "This query will be removed in a future version. Please use usersCount instead."
    )
  usersCount(where: UserWhereInput! = {}): Int
  authenticatedItem: AuthenticatedItem
  keystone: KeystoneMeta!
}

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  enableSignout: Boolean!
  enableSessionItem: Boolean!
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  isOrderable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID!): KeystoneAdminUIFieldMetaItemView
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode!
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
