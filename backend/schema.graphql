# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type Channel {
  id: ID!
  name: String
  description: String
  posts(
    where: PostWhereInput! = {}
    orderBy: [PostOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Post!]
  postsCount(where: PostWhereInput! = {}): Int
  club: Club
  status: String
  content: Channel_content_Document
}

type Channel_content_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input ChannelWhereUniqueInput {
  id: ID
}

input ChannelWhereInput {
  AND: [ChannelWhereInput!]
  OR: [ChannelWhereInput!]
  NOT: [ChannelWhereInput!]
  id: IDFilter
  name: StringFilter
  description: StringFilter
  posts: PostManyRelationFilter
  club: ClubWhereInput
  status: StringNullableFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input PostManyRelationFilter {
  every: PostWhereInput
  some: PostWhereInput
  none: PostWhereInput
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringNullableFilter
}

input NestedStringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableFilter
}

input ChannelOrderByInput {
  id: OrderDirection
  name: OrderDirection
  description: OrderDirection
  status: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input ChannelUpdateInput {
  name: String
  description: String
  posts: PostRelateToManyForUpdateInput
  club: ClubRelateToOneForUpdateInput
  status: String
  content: JSON
}

input PostRelateToManyForUpdateInput {
  disconnect: [PostWhereUniqueInput!]
  set: [PostWhereUniqueInput!]
  create: [PostCreateInput!]
  connect: [PostWhereUniqueInput!]
}

input ClubRelateToOneForUpdateInput {
  create: ClubCreateInput
  connect: ClubWhereUniqueInput
  disconnect: Boolean
}

input ChannelUpdateArgs {
  where: ChannelWhereUniqueInput!
  data: ChannelUpdateInput!
}

input ChannelCreateInput {
  name: String
  description: String
  posts: PostRelateToManyForCreateInput
  club: ClubRelateToOneForCreateInput
  status: String
  content: JSON
}

input PostRelateToManyForCreateInput {
  create: [PostCreateInput!]
  connect: [PostWhereUniqueInput!]
}

input ClubRelateToOneForCreateInput {
  create: ClubCreateInput
  connect: ClubWhereUniqueInput
}

type Club {
  id: ID!
  name: String
  channels(
    where: ChannelWhereInput! = {}
    orderBy: [ChannelOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Channel!]
  channelsCount(where: ChannelWhereInput! = {}): Int
  memberships(
    where: MembershipWhereInput! = {}
    orderBy: [MembershipOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Membership!]
  membershipsCount(where: MembershipWhereInput! = {}): Int
  status: String
  content: Club_content_Document
}

type Club_content_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input ClubWhereUniqueInput {
  id: ID
}

input ClubWhereInput {
  AND: [ClubWhereInput!]
  OR: [ClubWhereInput!]
  NOT: [ClubWhereInput!]
  id: IDFilter
  name: StringFilter
  channels: ChannelManyRelationFilter
  memberships: MembershipManyRelationFilter
  status: StringNullableFilter
}

input ChannelManyRelationFilter {
  every: ChannelWhereInput
  some: ChannelWhereInput
  none: ChannelWhereInput
}

input MembershipManyRelationFilter {
  every: MembershipWhereInput
  some: MembershipWhereInput
  none: MembershipWhereInput
}

input ClubOrderByInput {
  id: OrderDirection
  name: OrderDirection
  status: OrderDirection
}

input ClubUpdateInput {
  name: String
  channels: ChannelRelateToManyForUpdateInput
  memberships: MembershipRelateToManyForUpdateInput
  status: String
  content: JSON
}

input ChannelRelateToManyForUpdateInput {
  disconnect: [ChannelWhereUniqueInput!]
  set: [ChannelWhereUniqueInput!]
  create: [ChannelCreateInput!]
  connect: [ChannelWhereUniqueInput!]
}

input MembershipRelateToManyForUpdateInput {
  disconnect: [MembershipWhereUniqueInput!]
  set: [MembershipWhereUniqueInput!]
  create: [MembershipCreateInput!]
  connect: [MembershipWhereUniqueInput!]
}

input ClubUpdateArgs {
  where: ClubWhereUniqueInput!
  data: ClubUpdateInput!
}

input ClubCreateInput {
  name: String
  channels: ChannelRelateToManyForCreateInput
  memberships: MembershipRelateToManyForCreateInput
  status: String
  content: JSON
}

input ChannelRelateToManyForCreateInput {
  create: [ChannelCreateInput!]
  connect: [ChannelWhereUniqueInput!]
}

input MembershipRelateToManyForCreateInput {
  create: [MembershipCreateInput!]
  connect: [MembershipWhereUniqueInput!]
}

type Post {
  id: ID!
  title: String
  channel: Channel
  status: String
  content: Post_content_Document
  publishDate: DateTime
  author: User
  tags(
    where: TagWhereInput! = {}
    orderBy: [TagOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
}

type Post_content_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

scalar DateTime
  @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input PostWhereUniqueInput {
  id: ID
}

input PostWhereInput {
  AND: [PostWhereInput!]
  OR: [PostWhereInput!]
  NOT: [PostWhereInput!]
  id: IDFilter
  title: StringFilter
  channel: ChannelWhereInput
  status: StringNullableFilter
  publishDate: DateTimeNullableFilter
  author: UserWhereInput
  tags: TagManyRelationFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input TagManyRelationFilter {
  every: TagWhereInput
  some: TagWhereInput
  none: TagWhereInput
}

input PostOrderByInput {
  id: OrderDirection
  title: OrderDirection
  status: OrderDirection
  publishDate: OrderDirection
}

input PostUpdateInput {
  title: String
  channel: ChannelRelateToOneForUpdateInput
  status: String
  content: JSON
  publishDate: DateTime
  author: UserRelateToOneForUpdateInput
  tags: TagRelateToManyForUpdateInput
}

input ChannelRelateToOneForUpdateInput {
  create: ChannelCreateInput
  connect: ChannelWhereUniqueInput
  disconnect: Boolean
}

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input TagRelateToManyForUpdateInput {
  disconnect: [TagWhereUniqueInput!]
  set: [TagWhereUniqueInput!]
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
}

input PostUpdateArgs {
  where: PostWhereUniqueInput!
  data: PostUpdateInput!
}

input PostCreateInput {
  title: String
  channel: ChannelRelateToOneForCreateInput
  status: String
  content: JSON
  publishDate: DateTime
  author: UserRelateToOneForCreateInput
  tags: TagRelateToManyForCreateInput
}

input ChannelRelateToOneForCreateInput {
  create: ChannelCreateInput
  connect: ChannelWhereUniqueInput
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input TagRelateToManyForCreateInput {
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
}

type Preference {
  id: ID!
  name: String
  user: User
  channel: Channel
  canManageProducts: Boolean
  canSeeOtherUsers: Boolean
  canManageUsers: Boolean
  canManageRoles: Boolean
  canManageCart: Boolean
  canManageOrgs: Boolean
}

input PreferenceWhereUniqueInput {
  id: ID
}

input PreferenceWhereInput {
  AND: [PreferenceWhereInput!]
  OR: [PreferenceWhereInput!]
  NOT: [PreferenceWhereInput!]
  id: IDFilter
  name: StringFilter
  user: UserWhereInput
  channel: ChannelWhereInput
  canManageProducts: BooleanFilter
  canSeeOtherUsers: BooleanFilter
  canManageUsers: BooleanFilter
  canManageRoles: BooleanFilter
  canManageCart: BooleanFilter
  canManageOrgs: BooleanFilter
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input PreferenceOrderByInput {
  id: OrderDirection
  name: OrderDirection
  canManageProducts: OrderDirection
  canSeeOtherUsers: OrderDirection
  canManageUsers: OrderDirection
  canManageRoles: OrderDirection
  canManageCart: OrderDirection
  canManageOrgs: OrderDirection
}

input PreferenceUpdateInput {
  name: String
  user: UserRelateToOneForUpdateInput
  channel: ChannelRelateToOneForUpdateInput
  canManageProducts: Boolean
  canSeeOtherUsers: Boolean
  canManageUsers: Boolean
  canManageRoles: Boolean
  canManageCart: Boolean
  canManageOrgs: Boolean
}

input PreferenceUpdateArgs {
  where: PreferenceWhereUniqueInput!
  data: PreferenceUpdateInput!
}

input PreferenceCreateInput {
  name: String
  user: UserRelateToOneForCreateInput
  channel: ChannelRelateToOneForCreateInput
  canManageProducts: Boolean
  canSeeOtherUsers: Boolean
  canManageUsers: Boolean
  canManageRoles: Boolean
  canManageCart: Boolean
  canManageOrgs: Boolean
}

type Membership {
  id: ID!
  name: String
  description: String
  canManagePosts: Boolean
  canSeeOtherUsers: Boolean
  canManageUsers: Boolean
  canManageMemberships: Boolean
  canManageChannels: Boolean
  canManageOrgs: Boolean
  club(
    where: ClubWhereInput! = {}
    orderBy: [ClubOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Club!]
  clubCount(where: ClubWhereInput! = {}): Int
  users(
    where: UserWhereInput! = {}
    orderBy: [UserOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [User!]
  usersCount(where: UserWhereInput! = {}): Int
}

input MembershipWhereUniqueInput {
  id: ID
}

input MembershipWhereInput {
  AND: [MembershipWhereInput!]
  OR: [MembershipWhereInput!]
  NOT: [MembershipWhereInput!]
  id: IDFilter
  name: StringFilter
  description: StringFilter
  canManagePosts: BooleanFilter
  canSeeOtherUsers: BooleanFilter
  canManageUsers: BooleanFilter
  canManageMemberships: BooleanFilter
  canManageChannels: BooleanFilter
  canManageOrgs: BooleanFilter
  club: ClubManyRelationFilter
  users: UserManyRelationFilter
}

input ClubManyRelationFilter {
  every: ClubWhereInput
  some: ClubWhereInput
  none: ClubWhereInput
}

input UserManyRelationFilter {
  every: UserWhereInput
  some: UserWhereInput
  none: UserWhereInput
}

input MembershipOrderByInput {
  id: OrderDirection
  name: OrderDirection
  description: OrderDirection
  canManagePosts: OrderDirection
  canSeeOtherUsers: OrderDirection
  canManageUsers: OrderDirection
  canManageMemberships: OrderDirection
  canManageChannels: OrderDirection
  canManageOrgs: OrderDirection
}

input MembershipUpdateInput {
  name: String
  description: String
  canManagePosts: Boolean
  canSeeOtherUsers: Boolean
  canManageUsers: Boolean
  canManageMemberships: Boolean
  canManageChannels: Boolean
  canManageOrgs: Boolean
  club: ClubRelateToManyForUpdateInput
  users: UserRelateToManyForUpdateInput
}

input ClubRelateToManyForUpdateInput {
  disconnect: [ClubWhereUniqueInput!]
  set: [ClubWhereUniqueInput!]
  create: [ClubCreateInput!]
  connect: [ClubWhereUniqueInput!]
}

input UserRelateToManyForUpdateInput {
  disconnect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
}

input MembershipUpdateArgs {
  where: MembershipWhereUniqueInput!
  data: MembershipUpdateInput!
}

input MembershipCreateInput {
  name: String
  description: String
  canManagePosts: Boolean
  canSeeOtherUsers: Boolean
  canManageUsers: Boolean
  canManageMemberships: Boolean
  canManageChannels: Boolean
  canManageOrgs: Boolean
  club: ClubRelateToManyForCreateInput
  users: UserRelateToManyForCreateInput
}

input ClubRelateToManyForCreateInput {
  create: [ClubCreateInput!]
  connect: [ClubWhereUniqueInput!]
}

input UserRelateToManyForCreateInput {
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
}

type Role {
  id: ID!
  name: String
  canManageClubs: Boolean
  canSeeOtherUsers: Boolean
  canManageUsers: Boolean
  canManageRoles: Boolean
  canManageMemberships: Boolean
  canManagePosts: Boolean
  assignedTo(
    where: UserWhereInput! = {}
    orderBy: [UserOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [User!]
  assignedToCount(where: UserWhereInput! = {}): Int
}

input RoleWhereUniqueInput {
  id: ID
}

input RoleWhereInput {
  AND: [RoleWhereInput!]
  OR: [RoleWhereInput!]
  NOT: [RoleWhereInput!]
  id: IDFilter
  name: StringFilter
  canManageClubs: BooleanFilter
  canSeeOtherUsers: BooleanFilter
  canManageUsers: BooleanFilter
  canManageRoles: BooleanFilter
  canManageMemberships: BooleanFilter
  canManagePosts: BooleanFilter
  assignedTo: UserManyRelationFilter
}

input RoleOrderByInput {
  id: OrderDirection
  name: OrderDirection
  canManageClubs: OrderDirection
  canSeeOtherUsers: OrderDirection
  canManageUsers: OrderDirection
  canManageRoles: OrderDirection
  canManageMemberships: OrderDirection
  canManagePosts: OrderDirection
}

input RoleUpdateInput {
  name: String
  canManageClubs: Boolean
  canSeeOtherUsers: Boolean
  canManageUsers: Boolean
  canManageRoles: Boolean
  canManageMemberships: Boolean
  canManagePosts: Boolean
  assignedTo: UserRelateToManyForUpdateInput
}

input RoleUpdateArgs {
  where: RoleWhereUniqueInput!
  data: RoleUpdateInput!
}

input RoleCreateInput {
  name: String
  canManageClubs: Boolean
  canSeeOtherUsers: Boolean
  canManageUsers: Boolean
  canManageRoles: Boolean
  canManageMemberships: Boolean
  canManagePosts: Boolean
  assignedTo: UserRelateToManyForCreateInput
}

type Tag {
  id: ID!
  name: String
  posts(
    where: PostWhereInput! = {}
    orderBy: [PostOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Post!]
  postsCount(where: PostWhereInput! = {}): Int
}

input TagWhereUniqueInput {
  id: ID
}

input TagWhereInput {
  AND: [TagWhereInput!]
  OR: [TagWhereInput!]
  NOT: [TagWhereInput!]
  id: IDFilter
  name: StringFilter
  posts: PostManyRelationFilter
}

input TagOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input TagUpdateInput {
  name: String
  posts: PostRelateToManyForUpdateInput
}

input TagUpdateArgs {
  where: TagWhereUniqueInput!
  data: TagUpdateInput!
}

input TagCreateInput {
  name: String
  posts: PostRelateToManyForCreateInput
}

type User {
  id: ID!
  name: String
  email: String
  subjectId: String
  posts(
    where: PostWhereInput! = {}
    orderBy: [PostOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Post!]
  postsCount(where: PostWhereInput! = {}): Int
  role: Role
  preferences(
    where: PreferenceWhereInput! = {}
    orderBy: [PreferenceOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Preference!]
  preferencesCount(where: PreferenceWhereInput! = {}): Int
  memberships(
    where: MembershipWhereInput! = {}
    orderBy: [MembershipOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Membership!]
  membershipsCount(where: MembershipWhereInput! = {}): Int
}

input UserWhereUniqueInput {
  id: ID
  subjectId: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  subjectId: StringFilter
  posts: PostManyRelationFilter
  role: RoleWhereInput
  preferences: PreferenceManyRelationFilter
  memberships: MembershipManyRelationFilter
}

input PreferenceManyRelationFilter {
  every: PreferenceWhereInput
  some: PreferenceWhereInput
  none: PreferenceWhereInput
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
  subjectId: OrderDirection
}

input UserUpdateInput {
  name: String
  email: String
  subjectId: String
  posts: PostRelateToManyForUpdateInput
  role: RoleRelateToOneForUpdateInput
  preferences: PreferenceRelateToManyForUpdateInput
  memberships: MembershipRelateToManyForUpdateInput
}

input RoleRelateToOneForUpdateInput {
  create: RoleCreateInput
  connect: RoleWhereUniqueInput
  disconnect: Boolean
}

input PreferenceRelateToManyForUpdateInput {
  disconnect: [PreferenceWhereUniqueInput!]
  set: [PreferenceWhereUniqueInput!]
  create: [PreferenceCreateInput!]
  connect: [PreferenceWhereUniqueInput!]
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  subjectId: String
  posts: PostRelateToManyForCreateInput
  role: RoleRelateToOneForCreateInput
  preferences: PreferenceRelateToManyForCreateInput
  memberships: MembershipRelateToManyForCreateInput
}

input RoleRelateToOneForCreateInput {
  create: RoleCreateInput
  connect: RoleWhereUniqueInput
}

input PreferenceRelateToManyForCreateInput {
  create: [PreferenceCreateInput!]
  connect: [PreferenceWhereUniqueInput!]
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON
  @specifiedBy(
    url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"
  )

type Mutation {
  createChannel(data: ChannelCreateInput!): Channel
  createChannels(data: [ChannelCreateInput!]!): [Channel]
  updateChannel(
    where: ChannelWhereUniqueInput!
    data: ChannelUpdateInput!
  ): Channel
  updateChannels(data: [ChannelUpdateArgs!]!): [Channel]
  deleteChannel(where: ChannelWhereUniqueInput!): Channel
  deleteChannels(where: [ChannelWhereUniqueInput!]!): [Channel]
  createClub(data: ClubCreateInput!): Club
  createClubs(data: [ClubCreateInput!]!): [Club]
  updateClub(where: ClubWhereUniqueInput!, data: ClubUpdateInput!): Club
  updateClubs(data: [ClubUpdateArgs!]!): [Club]
  deleteClub(where: ClubWhereUniqueInput!): Club
  deleteClubs(where: [ClubWhereUniqueInput!]!): [Club]
  createPost(data: PostCreateInput!): Post
  createPosts(data: [PostCreateInput!]!): [Post]
  updatePost(where: PostWhereUniqueInput!, data: PostUpdateInput!): Post
  updatePosts(data: [PostUpdateArgs!]!): [Post]
  deletePost(where: PostWhereUniqueInput!): Post
  deletePosts(where: [PostWhereUniqueInput!]!): [Post]
  createPreference(data: PreferenceCreateInput!): Preference
  createPreferences(data: [PreferenceCreateInput!]!): [Preference]
  updatePreference(
    where: PreferenceWhereUniqueInput!
    data: PreferenceUpdateInput!
  ): Preference
  updatePreferences(data: [PreferenceUpdateArgs!]!): [Preference]
  deletePreference(where: PreferenceWhereUniqueInput!): Preference
  deletePreferences(where: [PreferenceWhereUniqueInput!]!): [Preference]
  createMembership(data: MembershipCreateInput!): Membership
  createMemberships(data: [MembershipCreateInput!]!): [Membership]
  updateMembership(
    where: MembershipWhereUniqueInput!
    data: MembershipUpdateInput!
  ): Membership
  updateMemberships(data: [MembershipUpdateArgs!]!): [Membership]
  deleteMembership(where: MembershipWhereUniqueInput!): Membership
  deleteMemberships(where: [MembershipWhereUniqueInput!]!): [Membership]
  createRole(data: RoleCreateInput!): Role
  createRoles(data: [RoleCreateInput!]!): [Role]
  updateRole(where: RoleWhereUniqueInput!, data: RoleUpdateInput!): Role
  updateRoles(data: [RoleUpdateArgs!]!): [Role]
  deleteRole(where: RoleWhereUniqueInput!): Role
  deleteRoles(where: [RoleWhereUniqueInput!]!): [Role]
  createTag(data: TagCreateInput!): Tag
  createTags(data: [TagCreateInput!]!): [Tag]
  updateTag(where: TagWhereUniqueInput!, data: TagUpdateInput!): Tag
  updateTags(data: [TagUpdateArgs!]!): [Tag]
  deleteTag(where: TagWhereUniqueInput!): Tag
  deleteTags(where: [TagWhereUniqueInput!]!): [Tag]
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  endSession: Boolean!
}

type Query {
  channels(
    where: ChannelWhereInput! = {}
    orderBy: [ChannelOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Channel!]
  channel(where: ChannelWhereUniqueInput!): Channel
  channelsCount(where: ChannelWhereInput! = {}): Int
  clubs(
    where: ClubWhereInput! = {}
    orderBy: [ClubOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Club!]
  club(where: ClubWhereUniqueInput!): Club
  clubsCount(where: ClubWhereInput! = {}): Int
  posts(
    where: PostWhereInput! = {}
    orderBy: [PostOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Post!]
  post(where: PostWhereUniqueInput!): Post
  postsCount(where: PostWhereInput! = {}): Int
  preferences(
    where: PreferenceWhereInput! = {}
    orderBy: [PreferenceOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Preference!]
  preference(where: PreferenceWhereUniqueInput!): Preference
  preferencesCount(where: PreferenceWhereInput! = {}): Int
  memberships(
    where: MembershipWhereInput! = {}
    orderBy: [MembershipOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Membership!]
  membership(where: MembershipWhereUniqueInput!): Membership
  membershipsCount(where: MembershipWhereInput! = {}): Int
  roles(
    where: RoleWhereInput! = {}
    orderBy: [RoleOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Role!]
  role(where: RoleWhereUniqueInput!): Role
  rolesCount(where: RoleWhereInput! = {}): Int
  tags(
    where: TagWhereInput! = {}
    orderBy: [TagOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Tag!]
  tag(where: TagWhereUniqueInput!): Tag
  tagsCount(where: TagWhereInput! = {}): Int
  users(
    where: UserWhereInput! = {}
    orderBy: [UserOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  enableSignout: Boolean!
  enableSessionItem: Boolean!
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  isOrderable: Boolean!
  isFilterable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
